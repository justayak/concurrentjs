window.Thread=function(){function b(a){var e="string"===typeof a;if(!e&&"function"!==typeof a)throw"[concurrent.js] threadFunction must be a function!";this.onmessages=null;if(c){if(!e){a=a.toString();for(var e=-1,d=0;d<a.length;d++){var h=a.charAt(d);if("{"===h){e=d;break}}for(var f=-1,d=a.length;0<d;d--)if(h=a.charAt(d),"}"===h){f=d;break}a=a.substring(e+1,f)}a=new Blob([a]);a=new Worker(URL.createObjectURL(a));var b=this;a.onmessage=function(a){null!==b.onmessages&&b.onmessages.call(b,a)};this.worker=
    a}else throw"[concurrent.js] Real multithreading is not available. Cannot create Thread. Try 'new Thread.Simple(..)'";}function k(a,e,d,b){a.onmessage(function(c){a.onmessages=null;d[e]=c;b()})}function g(a){if("function"!==typeof a)throw"[concurrent.js] threadFunction must be a function!";c?this._innerThread=new b("self.onmessage="+a.toString()):(this._onMessage=a,this.onmessages=null)}var c=!0;"undefined"===typeof window.Worker&&(console.error("[concurrent.js] Webworkers are not available but required!"),
    c=!1);window.URL=window.URL||window.webkitURL;"undefined"===typeof window.Blob&&(console.error("[concurrent.js] Blob required!"),c=!1);"undefined"===typeof window.URL&&(console.error("[concurrent.js] URL required!"),c=!1);b.available=c;b.prototype.onmessage=function(a){this.onmessages=a;return this};b.prototype.postMessage=function(a){this.worker.postMessage(a);return this};b.prototype.terminate=function(){Worker.prototype.terminate.call(this.worker);return this};b.join=function(a,b){if("function"!=
    typeof b)throw"[concurrent.js] 2. Parameter must be a function";if(!(a instanceof Array))throw"[concurrent.js] 1. Parameter must be an Array of Threads";for(var d=Array(a.length),c=a.length,f=0;f<a.length;f++)k(a[f],f,d,function(){c-=1;0==c&&b(d)})};c||(window.__currentCtx=null,window.postMessage=function(a){if(null===__currentCtx)throw"[concurrent.js] Thread Error --\x3e undetermined threading target!";null!==self.onmessages&&__currentCtx.onmessages.call(__currentCtx,{data:a});__currentCtx=null});
    g.prototype.onmessage=function(a){if(c)this._innerThread.onmessage(a);else this.onmessages=a;return this};g.prototype.postMessage=function(a){if(c)this._innerThread.postMessage(a);else{var b=this;setTimeout(function(){__currentCtx=b;b._onMessage.call(b,{data:a})},1)}return this};g.prototype.terminate=function(){c&&this._innerThread.terminate();return this};b.Simple=g;return b}();